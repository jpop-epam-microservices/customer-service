openapi: 3.0.3
info:
  title: Customer Service REST API
  version: "1.0"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: Customer
    description: customer service rest api
paths:
  /customers:
    get:
      tags:
        - customers
      summary: Get All Customers
      description: Get All Customers
      operationId: getAllCustomers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerDTO'
    post:
      tags:
        - customers
      summary: Create a customer
      description: Create a customer
      operationId: createCustomer
      requestBody:
        description: Create a new customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDTO'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
        '405':
          description: Invalid input
  /customers/{customerId}:
    get:
      tags:
        - customer
      summary: Get a customer by Id
      description: Returns a single customer
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          description: ID of customer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found
    put:
      tags:
        - customer
      summary: Updates an existing customer
      description: ''
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          description: ID of customer to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDTO'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
        '405':
          description: Invalid input
    delete:
      tags:
        - customer
      summary: Deletes a customer
      description: delete a customer
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          description: Customer id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Customer deleted successfully
        '400':
          description: Invalid customer id value
  # Add an address to a customer
  /customers/{customerId}/addresses:
    post:
      tags:
        - customer
        - address
      summary: Add an address to a customer
      description: Add an address to a customer
      operationId: addCustomerAddress
      parameters:
        - name: customerId
          in: path
          description: ID of customer to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressDTO'
      responses:
        201:
          description: Address added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDTO'
  # Get home address of a customer
  /customers/{customerId}/addresses?type=home:
    get:
      summary: Get home address of a customer
      operationId: getCustomerHomeAddress
      parameters:
        - name: customerId
          in: path
          description: ID of customer to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDTO'
        404:
          description: Home address not found
  # Update a customer address
  /customers/{customerId}/addresses/{addressId}:
    put:
      summary: Update a customer address
      operationId: updateCustomerAddress
      parameters:
        - name: customerId
          in: path
          description: ID of customer to update
          required: true
          schema:
            type: integer
            format: int64
        - name: addressId
          in: path
          description: ID of address to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressDTO'
      responses:
        201:
          description: Address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDTO'
  # Delete a customer address
    delete:
      summary: Delete a customer address
      operationId: deleteCustomerAddress
      parameters:
        - name: customerId
          in: path
          description: ID of customer to update
          required: true
          schema:
            type: integer
            format: int64
        - name: addressId
          in: path
          description: ID of address to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Address deleted successfully
components:
  schemas:
    CustomerDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        firstname:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@email.com
        mobile:
          type: string
          example: "+919876543210"
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressDTO'
    AddressDTO:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
        type:
          type: string
          default: HOME
          enum:
            - HOME
            - OFFICE
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Customer:
      description: Customer object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerDTO'